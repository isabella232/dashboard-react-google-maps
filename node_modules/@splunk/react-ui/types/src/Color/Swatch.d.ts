import React, { Component } from 'react';
import { legacyRefMode } from '@splunk/react-ui/Dropdown';
import { ClassComponentProps } from '../utils/types';
declare type SwatchClickHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    value?: string | null;
}) => void;
interface SwatchPropsBase {
    /** Append removes border from the right side. */
    append?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLButtonElement>;
    /** @private */
    error?: boolean;
    /** @private */
    noBorder?: boolean;
    /** @private. Call back function when activated. */
    onClick?: SwatchClickHandler;
    /** This has no effect on the appearance at this time but is recommend to be used when a
     * control is joined to the left. Styles may change in the future. */
    prepend?: boolean;
    /** The color of the swatch to be shown.
     * String values must be a valid hex value or `'transparent'`.
     * Invalid strings will render as `null`. */
    value?: string | null;
    /** @private */
    showSelected?: boolean;
}
declare const defaultProps: Required<Pick<SwatchPropsBase, 'error'>>;
declare type SwatchProps = ClassComponentProps<SwatchPropsBase, typeof defaultProps, 'button'>;
declare class Swatch extends Component<SwatchProps, {}> {
    private clickable;
    static propTypes: React.WeakValidationMap<ClassComponentProps<SwatchPropsBase, Required<Pick<SwatchPropsBase, "error">>, "button", never>>;
    static defaultProps: Required<Pick<SwatchPropsBase, "error">>;
    static [legacyRefMode]: boolean;
    focus(): void;
    private handleMount;
    render(): JSX.Element;
}
export default Swatch;
export { SwatchClickHandler };
